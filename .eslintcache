[{"/Users/altemirsilva/projects/rpicker-website/src/App.js":"1","/Users/altemirsilva/projects/rpicker-website/src/index.js":"2"},{"size":6092,"mtime":1612025918382,"results":"3","hashOfConfig":"4"},{"size":198,"mtime":1611786215563,"results":"5","hashOfConfig":"4"},{"filePath":"6","messages":"7","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"8"},"ialy0d",{"filePath":"9","messages":"10","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/altemirsilva/projects/rpicker-website/src/App.js",["11"],"import React from 'react';\nimport PropTypes from 'prop-types';\nimport AppBar from '@material-ui/core/AppBar';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport Divider from '@material-ui/core/Divider';\nimport Drawer from '@material-ui/core/Drawer';\nimport Hidden from '@material-ui/core/Hidden';\nimport IconButton from '@material-ui/core/IconButton';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport HomeIcon from '@material-ui/icons/Home';\nimport ExitToAppIcon from '@material-ui/icons/ExitToApp';\nimport AssessmentIcon from '@material-ui/icons/Assessment';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport { makeStyles, useTheme } from '@material-ui/core/styles';\nimport Card from '@material-ui/core/Card';\nimport CardActionArea from '@material-ui/core/CardActionArea';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardMedia from '@material-ui/core/CardMedia';\n\nconst drawerWidth = 240;\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    display: 'flex',\n  },\n  drawer: {\n    [theme.breakpoints.up('sm')]: {\n      width: drawerWidth,\n      flexShrink: 0,\n    },\n  },\n  appBar: {\n    [theme.breakpoints.up('sm')]: {\n      width: `calc(100% - ${drawerWidth}px)`,\n      marginLeft: drawerWidth,\n    },\n  },\n  menuButton: {\n    marginRight: theme.spacing(2),\n    [theme.breakpoints.up('sm')]: {\n      display: 'none',\n    },\n  },\n\n  rootCard: {\n    maxWidth: 345,\n    marginTop: 10,\n  },\n  mediaCard: {\n    height: 140,\n  },\n  // necessary for content to be below app bar\n  toolbar: theme.mixins.toolbar,\n  drawerPaper: {\n    width: drawerWidth,\n  },\n  content: {\n    flexGrow: 1,\n    padding: theme.spacing(3),\n  },\n}));\n\nfunction ResponsiveDrawer(props) {\n  const { window } = props;\n  const classes = useStyles();\n  const theme = useTheme();\n  const [mobileOpen, setMobileOpen] = React.useState(false);\n  const [photos, setPhotos] = React.useState([]);\n\n  const handleDrawerToggle = () => {\n    setMobileOpen(!mobileOpen);\n  };\n\n  React.useEffect(() => {\n    fetch(`http://localhost:3000/image`)\n      .then((response) => response.json())\n      .then((json) => setPhotos(json));\n  }, []);\n  console.log(photos);\n  const drawer = (\n    <div>\n      <div className={classes.toolbar} />\n      <Divider />\n      <List>\n        {['Index', 'Amount', 'Logout'].map((text, index) => (\n          <ListItem button key={text}>\n            <ListItemIcon>\n              {text === 'Index' ? (\n                <HomeIcon />\n              ) : text === 'Amount' ? (\n                <AssessmentIcon />\n              ) : (\n                <ExitToAppIcon />\n              )}\n            </ListItemIcon>\n            <ListItemText primary={text} />\n          </ListItem>\n        ))}\n      </List>\n      <Divider />\n    </div>\n  );\n\n  const container =\n    window !== undefined ? () => window().document.body : undefined;\n  if (photos.length === 0) {\n    return <div>Is loading</div>;\n  } else\n    return (\n      <div className={classes.root}>\n        <AppBar position=\"fixed\" className={classes.appBar}>\n          <Toolbar>\n            <IconButton\n              color=\"inherit\"\n              aria-label=\"open drawer\"\n              edge=\"start\"\n              onClick={handleDrawerToggle}\n              className={classes.menuButton}\n            >\n              <MenuIcon />\n            </IconButton>\n            <Typography variant=\"h6\" noWrap>\n              Rubish picker\n            </Typography>\n          </Toolbar>\n        </AppBar>\n        <nav className={classes.drawer} aria-label=\"mailbox folders\">\n          {/* The implementation can be swapped with js to avoid SEO duplication of links. */}\n          <Hidden smUp implementation=\"css\">\n            <Drawer\n              container={container}\n              variant=\"temporary\"\n              anchor={theme.direction === 'rtl' ? 'right' : 'left'}\n              open={mobileOpen}\n              onClose={handleDrawerToggle}\n              classes={{\n                paper: classes.drawerPaper,\n              }}\n              ModalProps={{\n                keepMounted: true, // Better open performance on mobile.\n              }}\n            >\n              {drawer}\n            </Drawer>\n          </Hidden>\n          <Hidden xsDown implementation=\"css\">\n            <Drawer\n              classes={{\n                paper: classes.drawerPaper,\n              }}\n              variant=\"permanent\"\n              open\n            >\n              {drawer}\n            </Drawer>\n          </Hidden>\n        </nav>\n        <main className={classes.content}>\n          <div className={classes.toolbar} />\n          <Typography paragraph>\n            {photos?.map((photo, key) => (\n              <Card className={classes.rootCard} key={key}>\n                <CardActionArea>\n                  <CardMedia\n                    className={classes.mediaCard}\n                    image={`data:image/jpeg;base64,${photo.photo.base64}`}\n                  />\n                  <CardContent>\n                    <Typography gutterBottom variant=\"h5\" component=\"h2\">\n                      {photo.logo}\n                    </Typography>\n                    <Typography\n                      variant=\"body2\"\n                      color=\"textSecondary\"\n                      component=\"p\"\n                    >\n                      {photo.label === 0\n                        ? 'No label was identified for this photo'\n                        : photo.label}\n                    </Typography>\n                  </CardContent>\n                </CardActionArea>\n              </Card>\n            ))}\n          </Typography>\n        </main>\n      </div>\n    );\n}\n\nResponsiveDrawer.propTypes = {\n  /**\n   * Injected by the documentation to work in an iframe.\n   * You won't need it on your project.\n   */\n  window: PropTypes.func,\n};\n\nexport default ResponsiveDrawer;\n","/Users/altemirsilva/projects/rpicker-website/src/index.js",[],{"ruleId":"12","severity":1,"message":"13","line":4,"column":8,"nodeType":"14","messageId":"15","endLine":4,"endColumn":19},"no-unused-vars","'CssBaseline' is defined but never used.","Identifier","unusedVar"]